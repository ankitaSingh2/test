// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target arm64-apple-ios13.2 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name SIFaceCaptureSDK
import AVFoundation
import Foundation
@_exported import SIFaceCaptureSDK
import SILoggerSDK
import Swift
import UIKit
import Vision
@objc public class SIGalleryPickerViewController : UIKit.UIViewController {
  public static var shared: SIFaceCaptureSDK.SIGalleryPickerViewController
  @objc override dynamic public func viewDidLoad()
  public func showGallery()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension SIGalleryPickerViewController : SIFaceCaptureSDK.ImagePickerDelegate {
  public func didSelect(image: UIKit.UIImage?)
}
public enum SIFaceDetectionResult : Swift.Int {
  case Ok
  case MultiFace
  case BadFace
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct SIImageQualityResult {
  public var hasLeftEyePosition: Swift.Bool?
  public var hasRightEyePosition: Swift.Bool?
  public var hasMouthPosition: Swift.Bool?
  public var leftEyeClosed: Swift.Bool?
  public var rightEyeClosed: Swift.Bool?
  public var hasSmile: Swift.Bool?
  public var detectionResult: SIFaceCaptureSDK.SIFaceDetectionResult?
  public var capturedImage: UIKit.UIImage?
  public var isEmpty: Swift.Bool?
  public var noFaceFound: Swift.Bool?
  public var isMaximumRetryExceeded: Swift.Bool?
  public var isCameraPermission: Swift.Bool?
  public var faceAngle: Swift.Float?
}
public class SIFaceValidationResult {
  public func singleFaceInImage(captureImage: UIKit.UIImage) -> SIFaceCaptureSDK.SIImageQualityResult
  public func imageSizeReduce(captureImage: UIKit.UIImage) -> UIKit.UIImage
  @objc deinit
}
public enum CameraPosition : Swift.Int {
  case Front
  case Back
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public protocol ImagePickerDelegate : AnyObject {
  func didSelect(image: UIKit.UIImage?)
}
@objc open class SIImagePicker : ObjectiveC.NSObject {
  public init(presentationController: UIKit.UIViewController, delegate: SIFaceCaptureSDK.ImagePickerDelegate)
  @objc override dynamic public init()
  @objc deinit
}
extension SIImagePicker : UIKit.UIImagePickerControllerDelegate {
  @objc dynamic public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
  @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
}
extension SIImagePicker : UIKit.UINavigationControllerDelegate {
}
public typealias FacialCompletionHandler = (SIFaceCaptureSDK.SIImageQualityResult?) -> Swift.Void
public typealias DetectCompletionHandler = ([Vision.VNFaceObservation]?) -> Swift.Void
@objc public class SIFacialHandler : ObjectiveC.NSObject {
  public static var shared: SIFaceCaptureSDK.SIFacialHandler
  public var facialCompletionHandler: SIFaceCaptureSDK.FacialCompletionHandler?
  public func doTakePicture(viewController: UIKit.UIViewController, completionHandler: @escaping SIFaceCaptureSDK.FacialCompletionHandler)
  public func doQualityCheckStaticImage(_ capturedImage: UIKit.UIImage) -> SIFaceCaptureSDK.SIImageQualityResult
  public func openPicker(completionHandler: @escaping SIFaceCaptureSDK.FacialCompletionHandler)
  public func readConfigForFacial(_ facialconfig: Swift.Dictionary<Swift.String, Any>?)
  @objc deinit
}
